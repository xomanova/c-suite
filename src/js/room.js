// Generated by CoffeeScript 1.12.7
(function() {
  var KEEP_FREQUENT_NUM, KEEP_RECENT_NUM, ScalarKalmanFilter, adjectives, adverbs, dot_product, extend_phase, get_player_interactions, join_room, netgames, normalize, nouns, safe_localStorage_access, save_player_interactions, silly_sentence, to_degrees, to_radians, update_room, update_time_difference_filter, vector_length, verbs,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];

  netgames = window.netgames = {};

  netgames.has_touch = 'ontouchstart' in window || 'msMaxTouchPoints' in window.navigator;

  netgames.key_value = function(key, value) {
    var object;
    object = {};
    object[key] = value;
    return object;
  };

  netgames.to_server_timestamp = function(client_timestamp) {
    return client_timestamp + netgames.time_difference;
  };

  netgames.to_client_timestamp = function(server_timestamp) {
    return server_timestamp - netgames.time_difference;
  };

  netgames.player_by_id = function(players, player_id) {
    console.log("logging from netgames.render room.js:30, players typeof: " + typeof players );
    console.log("logging from netgames.render room.js:31, players: " + JSON.stringify(players) );
    var i, len, player;
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      if (player.id === player_id) {
        return player;
      }
    }
    return null;
  };

  netgames.comma_list = function(list, comma, final_separator) {
    var first, i, last;
    if (comma == null) {
      comma = ', ';
    }
    if (final_separator == null) {
      final_separator = ' and ';
    }
    first = 2 <= list.length ? slice.call(list, 0, i = list.length - 1) : (i = 0, []), last = list[i++];
    return _.filter([first.join(comma), last]).join(final_separator);
  };

  netgames.shame_players = function(object, players, shameful) {
    return players.filter(function(player) {
      return object.hasOwnProperty(player.id) && shameful(object[player.id]);
    });
  };

  netgames.generate_shame_text = function(shame_players, no_shame_text, shame_threshold) {
    var other_num, plural;
    if (no_shame_text == null) {
      no_shame_text = 'Waiting for others...';
    }
    if (shame_threshold == null) {
      shame_threshold = 1;
    }
    if (shame_players.length === 0) {
      return no_shame_text;
    } else if (netgames.player_by_id(shame_players, netgames.player.id) != null) {
      if (shame_players.length > 1) {
        other_num = shame_players.length - 1;
        plural = other_num > 1 ? 's' : '';
        return "Waiting for you and " + other_num + " other" + plural;
      } else {
        return 'Waiting for you!';
      }
    } else if (shame_players.length <= shame_threshold) {
      return 'Waiting for ' + netgames.comma_list(shame_players.map(function(player) {
        return player.name;
      }));
    } else {
      return 'Waiting for ' + shame_players.length + ' others...';
    }
  };

  netgames.player_name_or_you = function(player, arg) {
    var are_is, have_has, name, possessive, ref, ref1, ref2, ref3, ref4, were_was;
    ref = arg != null ? arg : {}, possessive = (ref1 = ref.possessive) != null ? ref1 : false, have_has = (ref2 = ref.have_has) != null ? ref2 : false, are_is = (ref3 = ref.are_is) != null ? ref3 : false, were_was = (ref4 = ref.were_was) != null ? ref4 : false;
    if (player == null) {
      return '';
    }
    if (player.id === netgames.player.id) {
      name = possessive ? 'Your' : 'You';
      if (have_has) {
        name += ' have';
      }
      if (are_is) {
        name += ' are';
      }
      if (were_was) {
        name += ' were';
      }
      return name;
    } else {
      name = player.name;
      if (possessive) {
        name += "'s";
      }
      if (have_has) {
        name += ' has';
      }
      if (are_is) {
        name += ' is';
      }
      if (were_was) {
        name += ' was';
      }
      return name;
    }
  };

  netgames.render_list = function($list, $template, values, render) {
    var $item, $items, i, index, len, results, value;
    $list.children("*:nth-child(n+" + (values.length + 1) + ")").remove();
    $items = $list.children();
    results = [];
    for (index = i = 0, len = values.length; i < len; index = ++i) {
      value = values[index];
      if ($items[index]) {
        results.push(render($items.eq(index), value, index));
      } else {
        $item = $template.clone().removeClass('template');
        render($item, value, index);
        results.push($list.append($item));
      }
    }
    return results;
  };

  netgames.render_players = function(state, players, $players, class_predicates) {
    return netgames.render_list($players, $('<li>'), players, (function(_this) {
      return function($player, player) {
        var klass, predicate, results;
        $player.text(player.name);
        $player.addClass('notranslate');
        $player.data('id', player.id);
        results = [];
        for (klass in class_predicates) {
          predicate = class_predicates[klass];
          results.push($player.toggleClass(klass, predicate(state, players, player)));
        }
        return results;
      };
    })(this));
  };

  netgames.render_theme = function($content, theme) {
    var $el, el, key, ref, results, text, text_class;
    if ($content.attr('data-theme') === theme.id) {
      return;
    }
    $content.attr('data-theme', theme.id);
    ref = theme.text;
    results = [];
    for (key in ref) {
      text = ref[key];
      text_class = '.text-' + key.replace(/[^a-z]/g, '-');
      results.push((function() {
        var i, len, ref1, results1;
        ref1 = $content.find(text_class);
        results1 = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          el = ref1[i];
          $el = $(el);
          if ($el.is('.capitalised')) {
            results1.push($el.text(text[0].toUpperCase() + text.slice(1)));
          } else {
            results1.push($el.text(text));
          }
        }
        return results1;
      })());
    }
    return results;
  };

  KEEP_RECENT_NUM = 50;

  KEEP_FREQUENT_NUM = 50;

  safe_localStorage_access = function(method) {
    var error, ref;
    try {
      return method();
    } catch (error1) {
      error = error1;
      if (!error instanceof ((ref = window.SecurityError) != null ? ref : window.DOMException)) {
        throw error;
      }
    }
    return null;
  };

  get_player_interactions = function() {
    var result;
    result = safe_localStorage_access(function() {
      if (localStorage.player_interactions != null) {
        return JSON.parse(localStorage.player_interactions);
      }
    });
    return result != null ? result : {
      time: {},
      count: {}
    };
  };

  save_player_interactions = function(player_interactions) {
    return safe_localStorage_access(function() {
      return localStorage.player_interactions = JSON.stringify(player_interactions);
    });
  };

  netgames.register_player_interactions = function(timestamp, players) {
    var i, len, lowest_count, lowest_timestamp, player, player_id, player_interactions, player_timestamp, ref, ref1, ref2, ref3, ref4;
    player_interactions = get_player_interactions();
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      player_interactions.time[player.id] = timestamp;
      player_interactions.count[player.id] = ((ref = player_interactions.count[player.id]) != null ? ref : 0) + 1;
    }
    lowest_timestamp = (ref1 = _.values(player_interactions.time).sort()[KEEP_RECENT_NUM]) != null ? ref1 : null;
    lowest_count = (ref2 = _.values(player_interactions.count).sort()[KEEP_FREQUENT_NUM]) != null ? ref2 : null;
    if (lowest_timestamp != null) {
      ref3 = player_interactions.time;
      for (player_id in ref3) {
        player_timestamp = ref3[player_id];
        if (player_timestamp < lowest_timestamp) {
          delete player_interactions.time[player_id];
        }
      }
    }
    if (lowest_count != null) {
      ref4 = player_interactions.count;
      for (player_id in ref4) {
        player_timestamp = ref4[player_id];
        if (player_timestamp < lowest_count) {
          delete player_interactions.count[player_id];
        }
      }
    }
    return save_player_interactions(player_interactions);
  };

  netgames.change_name_storage = function(player_name) {
    var ref;
    if (player_name.length === 0) {
      return false;
    }
    safe_localStorage_access(function() {
      return localStorage.player_name = player_name;
    });
    if (netgames != null) {
      if ((ref = netgames.player) != null) {
        ref.name = player_name;
      }
    }
    return true;
  };

  netgames.change = function(state) {
    return netgames.socket.send(JSON.stringify({
      action: 'change',
      room_id: netgames.room_id,
      player_id: netgames.player.id,
      state: state,
      //clock: netgames.room.clock.server
    }));
  };

  netgames.shuffle = function(amount) {
    return netgames.socket.send(JSON.stringify({
      action: 'shuffle',
      room_id: netgames.room_id,
      player_id: netgames.player.id,
      amount: amount
    }));
  };

  netgames.join = function() {
    return netgames.socket.send(JSON.stringify({
      action: 'join',
      room_id: netgames.room_id,
      player: netgames.player,
      timestamp: Date.now()
    }));
  };

  netgames.join_midway = function() {
    return netgames.socket.send(JSON.stringify({
      action: 'join-midway',
      room_id: netgames.room_id,
      player_id: netgames.player.id
    }));
  };

  netgames.change_name = function(player_name) {
    if (!netgames.change_name_storage(player_name)) {
      return false;
    }
    netgames.socket.send(JSON.stringify({
      action: 'change-name',
      room_id: netgames.room_id,
      player: netgames.player
    }));
    return true;
  };

  netgames.leave = function() {
    return netgames.socket.send(JSON.stringify({
      action: 'leave',
      room_id: netgames.room_id,
      player_id: netgames.player.id
    }));
  };

  netgames.boot = function(player_ids) {
    return netgames.socket.send(JSON.stringify({
      action: 'boot',
      room_id: netgames.room_id,
      player_ids: player_ids
    }));
  };

  netgames.restart = function() {
    return netgames.socket.send(JSON.stringify({
      action: 'restart',
      room_id: netgames.room_id
    }));
  };

  netgames.measure_time_difference = function() {
    return netgames.socket.send(JSON.stringify({
      action: 'measure-time-difference',
      timestamp: Date.now()
    }));
  };

  netgames.refresh_if = function(needs_refresh) {
    return safe_localStorage_access(function() {
      if (needs_refresh) {
        if (!localStorage.client_refreshed) {
          localStorage.client_refreshed = true;
          return window.location.reload();
        }
      } else {
        return delete localStorage.client_refreshed;
      }
    });
  };

  netgames.render = function(state, players) {
    var $content, $section, $spectator_base, $utility_menu, phase, player, ref, spectator;
    state = JSON.parse(state);
    //players = JSON.parse(players);
    console.log("logging from netgames.render room.js:364, state typeof: " + typeof state );
    console.log("logging from netgames.render room.js:365, state: " + state );
    console.log("logging from netgames.render room.js:366, state.phase: " + state.phase );
    console.log("logging from netgames.render room.js:367, players typeof: " + typeof players );
    console.log("logging from netgames.render room.js:368, players: " + JSON.stringify(players) );

    $section = $('#' + state.phase);
    netgames.refresh_if($section.length === 0);
    if ($section.is(':hidden')) {
      $(document).scrollTop(0);
    }
    $('section').hide();
    $section.show();
    player = netgames.player_by_id(players, netgames.player.id);
    spectator = netgames.player_by_id(netgames.room.spectators, netgames.player.id);
    $content = $('#content');
    $content.toggleClass('host', players[0] === player);
    $content.toggleClass('spectator', spectator != null);
    $content.toggleClass('has-spectators', netgames.room.spectators.length > 0);
    $utility_menu = $('#utility-menu');
    $utility_menu.toggleClass('huddle', state.phase === 'huddle');
    $utility_menu.toggleClass('can-leave', (ref = player != null ? player.can_leave : void 0) != null ? ref : false);
    $utility_menu.toggleClass('can-spectate', players.length > 1);
    $utility_menu.toggleClass('can-boot', players.some(function(player) {
      return player.can_leave;
    }));
    netgames.render_players(state, players, $utility_menu.find('.players'), netgames.utility_menu_player_class_predicates);
    netgames.render_players(state, netgames.room.spectators, $utility_menu.find('.spectators'), {
      'current-player': function(state, spectators, spectator) {
        return spectator.id === netgames.player.id;
      },
      'boot-enabled': function() {
        return players[0].id === netgames.player.id;
      }
    });
    $spectator_base = $('#spectator-base');
    $spectator_base.toggleClass('can-join', netgames.room.can_join);
    if (typeof netgames.prerender === "function") {
      netgames.prerender(state, players, $section);
    }
    phase = netgames.phases[state.phase];
    if (typeof phase === 'function') {
      phase(state, players, $section);
    } else {
      if (phase != null) {
        if (typeof phase.render === "function") {
          phase.render(state, players, $section);
        }
      }
      if (phase != null) {
        if (typeof phase.refresh === "function") {
          phase.refresh(state, players, $section);
        }
      }
    }
    return $content.show();
  };

  netgames.refresh = function() {
    var $section, phase, state;
    state = netgames.state;
    $section = $('#' + state.phase);
    phase = netgames.phases[state.phase];
    return phase != null ? typeof phase.refresh === "function" ? phase.refresh(state, netgames.players, $section) : void 0 : void 0;
  };

  netgames.phases = {};

  netgames.utility_menu_player_class_predicates = {
    'current-player': function(state, players, player) {
      return player.id === netgames.player.id;
    },
    'boot-enabled': function(state, players, player) {
      return players[0].id === netgames.player.id && players[0].id !== player.id && player.can_leave;
    }
  };

  netgames.add_phases = function(phases) {
    var name, phase, results;
    results = [];
    for (name in phases) {
      phase = phases[name];
      results.push(netgames.phases[name] = phase);
    }
    return results;
  };

  netgames.add_utility_menu_player_class_predicates = function(class_predicates) {
    var klass, predicate, results;
    results = [];
    for (klass in class_predicates) {
      predicate = class_predicates[klass];
      results.push(netgames.utility_menu_player_class_predicates[klass] = predicate);
    }
    return results;
  };

  netgames.lib = {};

  adjectives = ['Alert', 'Brave', 'Clean', 'Dark', 'Eager', 'Fast', 'Good', 'Huge', 'Itchy', 'Jolly', 'Kind', 'Large', 'Mean', 'Nice', 'Odd', 'Pink', 'Quick', 'Real', 'Shy', 'Tall', 'Ugly', 'Vigorous', 'Warm', 'Xenophobic', 'Young', 'Zesty'];

  nouns = ['Ants', 'Bees', 'Cats', 'Dogs', 'Eagles', 'Fish', 'Goats', 'Hens', 'Insects', 'Jellyfish', 'Koalas', 'Lions', 'Mice', 'Newts', 'Otters', 'Pandas', 'Quails', 'Rabbits', 'Sloths', 'Turtles', 'Unicorns', 'Vultures', 'Wombats', 'Xylophones', 'Yaks', 'Zebras'];

  verbs = ['Ache', 'Bite', 'Cheer', 'Dig', 'Eat', 'Fail', 'Give', 'Help', 'Itch', 'Jump', 'Knit', 'Lurk', 'Move', 'Nod', 'Order', 'Party', 'Quit', 'Read', 'Stop', 'Tease', 'Unite', 'Veer', 'Wish', 'X-Ray', 'Yell', 'Zoom'];

  adverbs = ['Angrily', 'Busily', 'Calmly', 'Dryly', 'Easily', 'Fearlessly', 'Grimly', 'Happily', 'Illegally', 'Jokingly', 'Keenly', 'Lazily', 'Madly', 'Noisily', 'Openly', 'Politely', 'Quietly', 'Readily', 'Swiftly', 'Terribly', 'Usefully', 'Vaguely', 'Weakly', 'Xenophobically', 'Yearly', 'Zealously'];

  silly_sentence = function(string) {
    var ordering;
    ordering = [adjectives, nouns, verbs, adverbs];
    return string.split('').map(function(letter, index) {
      return ordering[index][letter.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0)];
    }).join(' ');
  };

  extend_phase = function(phase, additional) {
    var old_attach, old_refresh, old_render, ref;
    if (additional == null) {
      additional = {};
    }
    old_render = (ref = phase.render) != null ? ref : phase.method;
    old_attach = phase.attach;
    old_refresh = phase.refresh;
    phase.render = function(state, players, $section) {
      if (old_render != null) {
        old_render.call(phase, state, players, $section);
      }
      return typeof additional.render === "function" ? additional.render(state, players, $section) : void 0;
    };
    phase.method = phase.render;
    phase.refresh = function(state, players, $section) {
      if (old_refresh != null) {
        old_refresh.call(phase, state, players, $section);
      }
      return typeof additional.refresh === "function" ? additional.refresh(state, players, $section) : void 0;
    };
    phase.attach = function($section) {
      if (old_attach != null) {
        old_attach.call(phase, $section);
      }
      return typeof additional.attach === "function" ? additional.attach($section) : void 0;
    };
    return phase;
  };

  netgames.lib.huddle = function(arg, additional) {
    var down_button_selector, enable_shuffle, leave_button_selector, max_players, message, min_players, players_selector, ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, spectators_selector, start_button_selector, up_button_selector;
    console.log("logging from netgames.lib.huddle room.js:513, arg: " + JSON.stringify(arg) );
    console.log("logging from netgames.lib.huddle room.js:514, additional: " + JSON.stringify(additional) );
    ref = arg != null ? arg : {}, players_selector = (ref1 = ref.players_selector) != null ? ref1 : '.players', spectators_selector = (ref2 = ref.spectators_selector) != null ? ref2 : '.spectators', start_button_selector = (ref3 = ref.start_button_selector) != null ? ref3 : '.start', leave_button_selector = (ref4 = ref.leave_button_selector) != null ? ref4 : '.leave', up_button_selector = (ref5 = ref.up_button_selector) != null ? ref5 : '.up', down_button_selector = (ref6 = ref.down_button_selector) != null ? ref6 : '.down', min_players = (ref7 = ref.min_players) != null ? ref7 : 1, max_players = (ref8 = ref.max_players) != null ? ref8 : 2e308, message = (ref9 = ref.message) != null ? ref9 : null, enable_shuffle = (ref10 = ref.enable_shuffle) != null ? ref10 : false;
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      start: function() {
        return netgames.change({
          ready: true
        });
      },
      leave: function() {
        return netgames.leave();
      },
      move_up: function() {
        return netgames.shuffle(-1);
      },
      move_down: function() {
        return netgames.shuffle(1);
      },
      attach: function($section) {
        $section.find(start_button_selector).click(this.start);
        $section.find(leave_button_selector).click(this.leave);
        $section.find(up_button_selector).click(this.move_up);
        return $section.find(down_button_selector).click(this.move_down);
      },
      method: function(state, players, $section) {
        var $message, $start_game, is_host, is_last, is_second, ref11;
        is_host = players[0].id === netgames.player.id;
        is_second = ((ref11 = players[1]) != null ? ref11.id : void 0) === netgames.player.id;
        is_last = players[players.length - 1].id === netgames.player.id;
        $section.find('.room-id').text(netgames.room_id);
        $section.find('.phonetic').text(silly_sentence(netgames.room_id));
        $section.find('.shuffle').toggle(enable_shuffle && !state.booting);
        $section.find(up_button_selector).toggleClass('disabled', is_host || is_second);
        $section.find(down_button_selector).toggleClass('disabled', is_last);
        $message = $section.find('.message');
        $message.toggle(message != null);
        if (message != null) {
          $message.text(message);
        }
        netgames.render_players(state, players, $section.find(players_selector), {
          highlight: function(state, players, player) {
            return player.id === netgames.player.id;
          }
        });
        netgames.render_players(state, netgames.room.spectators, $section.find(spectators_selector), {
          highlight: function(state, players, player) {
            return player.id === netgames.player.id;
          }
        });
        $start_game = $section.find(start_button_selector);
        if (players.length < min_players) {
          $start_game.addClass('disabled');
          return $start_game.text("Need " + min_players + " players...");
        } else if (players.length > max_players) {
          $start_game.addClass('disabled');
          return $start_game.text('Too many players...');
        } else {
          $start_game.removeClass('disabled');
          return $start_game.text('Start Game');
        }
      }
    }, additional);
  };

  netgames.lib.wait = function(arg, additional) {
    var get_disabled_text, is_disabled, ref, ref1, ref2, ref3, ref4, selector, text;
    ref = arg != null ? arg : {}, selector = (ref1 = ref.selector) != null ? ref1 : '.btn', text = (ref2 = ref.text) != null ? ref2 : 'OK', is_disabled = (ref3 = ref.is_disabled) != null ? ref3 : function(state, players) {
      return false;
    }, get_disabled_text = (ref4 = ref.get_disabled_text) != null ? ref4 : function(state, players) {
      return null;
    };
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      action: function() {
        return netgames.change({
          ready: true
        });
      },
      attach: function($section) {
        return $section.find(selector).click(this.action);
      },
      method: function(state, players, $section) {
        var $button, disabled;
        $button = $section.find(selector);
        disabled = is_disabled(state, players);
        $button.toggleClass('disabled', disabled);
        if (disabled) {
          return $button.text(get_disabled_text(state, players));
        } else {
          return $button.text(text);
        }
      }
    }, additional);
  };

  netgames.lib.wait_all = function(arg, additional) {
    var get_disabled_text, get_no_shame_text, get_shame_players, is_disabled, ref, ref1, ref2, ref3, ref4, ref5, ref6, selector, text;
    ref = arg != null ? arg : {}, selector = (ref1 = ref.selector) != null ? ref1 : '.btn', text = (ref2 = ref.text) != null ? ref2 : 'OK', is_disabled = (ref3 = ref.is_disabled) != null ? ref3 : function(state, players) {
      return false;
    }, get_disabled_text = (ref4 = ref.get_disabled_text) != null ? ref4 : function(state, players) {
      return null;
    }, get_no_shame_text = (ref5 = ref.get_no_shame_text) != null ? ref5 : function(state, players) {
      return null;
    }, get_shame_players = (ref6 = ref.get_shame_players) != null ? ref6 : function(state, players) {
      return netgames.shame_players(state.ready, players, function(ready) {
        return !ready;
      });
    };
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      action: function() {
        var ready;
        ready = {};
        ready[netgames.player.id] = true;
        return netgames.change({
          ready: ready
        });
      },
      attach: function($section) {
        return $section.find(selector).click(this.action);
      },
      method: function(state, players, $section) {
        var $button, disabled, ready, ref7, ref8;
        $button = $section.find(selector);
        ready = (ref7 = state.ready[netgames.player.id]) != null ? ref7 : false;
        disabled = is_disabled(state, players);
        $button.toggleClass('disabled', ready || disabled);
        return $button.text(disabled ? (ref8 = get_disabled_text(state, players)) != null ? ref8 : text : !ready ? text : netgames.generate_shame_text(get_shame_players(state, players), get_no_shame_text(state, players)));
      }
    }, additional);
  };

  netgames.lib.pass = function(arg, additional) {
    var get_shame_players, ref, ref1, ref2, ref3, selector, text;
    ref = arg != null ? arg : {}, selector = (ref1 = ref.selector) != null ? ref1 : '.btn', text = (ref2 = ref.text) != null ? ref2 : 'Pass', get_shame_players = (ref3 = ref.get_shame_players) != null ? ref3 : function(state, players) {
      return netgames.shame_players(state.pass, players, function(val) {
        return !val;
      });
    };
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      action: function() {
        var pass;
        pass = {};
        pass[netgames.player.id] = true;
        return netgames.change({
          pass: netgames.key_value(netgames.player.id, $(this).is('.btn-default'))
        });
      },
      attach: function($section) {
        return $section.find(selector).click(this.action);
      },
      method: function(state, players, $section) {
        var $button, pass, shame_players;
        $button = $section.find(selector);
        pass = state.pass[netgames.player.id];
        shame_players = get_shame_players(state, players);
        $button.toggleClass('btn-default', !pass);
        $button.toggleClass('btn-warning', pass);
        return $button.text(!pass ? text : netgames.generate_shame_text(shame_players));
      }
    }, additional);
  };

  netgames.lib.select_player = function(arg, additional) {
    var $player_template, button_disabled, change, filter, get_icons, get_id, is_active, is_disabled, is_enabled, list_selector, ok_selector, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, render_extra, target_property, valid_target;
    ref = arg != null ? arg : {}, valid_target = (ref1 = ref.valid_target) != null ? ref1 : '.enabled a:not(.disabled)', target_property = (ref2 = ref.target_property) != null ? ref2 : 'target', list_selector = (ref3 = ref.list_selector) != null ? ref3 : '.list-group', ok_selector = (ref4 = ref.ok_selector) != null ? ref4 : '.btn', $player_template = (ref5 = ref.$player_template) != null ? ref5 : $('<a class="list-group-item">\n  <span class="player-name"></span>\n  <span class="label label-default"></span>\n</a>'), get_id = (ref6 = ref.get_id) != null ? ref6 : function(player, index) {
      return player.id;
    }, get_icons = (ref7 = ref.get_icons) != null ? ref7 : function(state, players, player, index) {
      return '';
    }, is_enabled = (ref8 = ref.is_enabled) != null ? ref8 : function(state, players) {
      return false;
    }, is_active = (ref9 = ref.is_active) != null ? ref9 : function(state, players, player, index) {
      return state[target_property] === get_id(player, index);
    }, is_disabled = (ref10 = ref.is_disabled) != null ? ref10 : function(state, players, player, index) {
      return false;
    }, filter = (ref11 = ref.filter) != null ? ref11 : function(state, players, player, index) {
      return true;
    }, button_disabled = (ref12 = ref.button_disabled) != null ? ref12 : function(state, players) {
      return state[target_property] == null;
    }, change = (ref13 = ref.change) != null ? ref13 : function(target_property, $player, id) {
      return netgames.key_value(target_property, $player.is('.active') ? null : id);
    }, render_extra = (ref14 = ref.render_extra) != null ? ref14 : function($player, player, index) {
      return null;
    };
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      action: function() {
        var $player;
        $player = $(this);
        return netgames.change(change(target_property, $player, $player.data('id')));
      },
      attach: function($section) {
        $section.on('click', list_selector + valid_target, this.action);
        return $section.find(ok_selector).on('click', function(event) {
          return netgames.change({
            ready: true
          });
        });
      },
      method: function(state, players, $section) {
        var $players, filtered_players;
        $section.find(ok_selector).toggleClass('disabled', button_disabled(state, players));
        $players = $section.find(list_selector);
        $players.toggleClass('enabled', is_enabled(state, players));
        filtered_players = players.filter(function(player, index) {
          return filter(state, players, player, index);
        });
        return netgames.render_list($players, $player_template, filtered_players, function($player, player, index) {
          var player_id;
          $player.toggleClass('active', is_active(state, players, player, index));
          $player.toggleClass('disabled', is_disabled(state, players, player, index));
          player_id = get_id(player, index);
          $player.attr('data-id', player_id);
          $player.data('id', player_id);
          $player.find('.player-name').text(player.name);
          $player.find('.label').text(get_icons(state, players, player, index));
          return render_extra($player, state, players, player, index);
        });
      }
    }, additional);
  };

  netgames.lib.multiplayer_vote = function(arg, additional) {
    var no_class, no_selector, ref, ref1, ref2, ref3, ref4, ref5, ref6, shame_selector, vote_property, yes_class, yes_selector;
    ref = arg != null ? arg : {}, yes_selector = (ref1 = ref.yes_selector) != null ? ref1 : '.yes', yes_class = (ref2 = ref.yes_class) != null ? ref2 : 'btn-success', no_selector = (ref3 = ref.no_selector) != null ? ref3 : '.no', no_class = (ref4 = ref.no_class) != null ? ref4 : 'btn-danger', vote_property = (ref5 = ref.vote_property) != null ? ref5 : 'votes', shame_selector = (ref6 = ref.shame_selector) != null ? ref6 : null;
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      action: function() {
        return netgames.change(netgames.key_value(vote_property, netgames.key_value(netgames.player.id, $(this).is(yes_selector))));
      },
      attach: function($section) {
        $section.find(yes_selector).on('click', this.action);
        return $section.find(no_selector).on('click', this.action);
      },
      render: function(state, players, $section) {
        var $shame_text, has_voted, shame_players;
        $section.find(yes_selector).toggleClass(yes_class, state[vote_property][netgames.player.id] !== false);
        $section.find(yes_selector).toggleClass('btn-default', state[vote_property][netgames.player.id] === false);
        $section.find(no_selector).toggleClass(no_class, state[vote_property][netgames.player.id] !== true);
        $section.find(no_selector).toggleClass('btn-default', state[vote_property][netgames.player.id] === true);
        if (shame_selector != null) {
          has_voted = state[vote_property][netgames.player.id] != null;
          shame_players = netgames.shame_players(state[vote_property], players, function(val) {
            return val == null;
          });
          $shame_text = $section.find(shame_selector);
          $shame_text.toggle(has_voted);
          return $shame_text.text(netgames.generate_shame_text(shame_players));
        }
      }
    }, additional);
  };

  netgames.lib.choose_word_packs = function(arg, additional) {
    var confirm_setup_selector, pack_selector, ref, ref1, ref2;
    ref = arg != null ? arg : {}, pack_selector = (ref1 = ref.pack_selector) != null ? ref1 : '.word-packs .btn', confirm_setup_selector = (ref2 = ref.confirm_setup_selector) != null ? ref2 : '.confirm-setup';
    if (additional == null) {
      additional = {};
    }
    return extend_phase(netgames.lib.wait({
      selector: confirm_setup_selector,
      is_disabled: function(state) {
        return _.sum(_.values(state.chosen_packs)) < 1;
      },
      get_disabled_text: function(state, players) {
        return 'Select at least one pack';
      }
    }, {
      render: function(state, players, $section) {
        var $pack, $packs, i, len, pack, pack_name, results;
        $packs = $section.find(pack_selector);
        results = [];
        for (i = 0, len = $packs.length; i < len; i++) {
          pack = $packs[i];
          $pack = $(pack);
          pack_name = $pack.data('pack-name');
          results.push($pack.toggleClass('selected', state.chosen_packs[pack_name]));
        }
        return results;
      },
      attach: function($section) {
        return $section.find(pack_selector).click(function(event) {
          var $this, pack_name, selected;
          $this = $(this);
          selected = $this.hasClass('selected');
          pack_name = $this.data('pack-name');
          return netgames.change({
            chosen_packs: netgames.key_value(pack_name, !selected)
          });
        });
      }
    }), additional);
  };

  netgames.lib.two_teams = function(arg, additional) {
    var blue_class, blue_selector, confirm_teams_selector, min_team_size, red_class, red_selector, ref, ref1, ref2, ref3, ref4, ref5, ref6;
    ref = arg != null ? arg : {}, confirm_teams_selector = (ref1 = ref.confirm_teams_selector) != null ? ref1 : '.confirm-teams', blue_selector = (ref2 = ref.blue_selector) != null ? ref2 : '.btn.blue-team', blue_class = (ref3 = ref.blue_class) != null ? ref3 : 'btn-primary', red_selector = (ref4 = ref.red_selector) != null ? ref4 : '.btn.red-team', red_class = (ref5 = ref.red_class) != null ? ref5 : 'btn-danger', min_team_size = (ref6 = ref.min_team_size) != null ? ref6 : void 0;
    if (additional == null) {
      additional = {};
    }
    return extend_phase(netgames.lib.wait({
      selector: confirm_teams_selector,
      text: 'Confirm teams',
      is_disabled: function(state, players) {
        var team_counts;
        team_counts = _.countBy(players, (function(_this) {
          return function(player) {
            return state.team[player.id];
          };
        })(this));
        return Object.values(team_counts).some((function(_this) {
          return function(count) {
            return count < (min_team_size != null ? min_team_size : 0);
          };
        })(this));
      },
      get_disabled_text: function(state, players) {
        return "Need at least " + min_team_size + " per team...";
      }
    }, {
      attach: function($section) {
        $section.find(blue_selector).on('click', function() {
          return netgames.change({
            team: netgames.key_value(netgames.player.id, 'blue')
          });
        });
        return $section.find(red_selector).on('click', function() {
          return netgames.change({
            team: netgames.key_value(netgames.player.id, 'red')
          });
        });
      },
      render: function(state, players, $section) {
        var blue_team, player_ids, red_team, render_team, team;
        team = state.team[netgames.player.id];
        $section.find(blue_selector).toggleClass(blue_class, team === 'blue').toggleClass('btn-default', team !== 'blue');
        $section.find(red_selector).toggleClass(red_class, team === 'red').toggleClass('btn-default', team !== 'red');
        player_ids = _.map(players, 'id');
        red_team = player_ids.filter((function(_this) {
          return function(player_id) {
            return state.team[player_id] === 'red';
          };
        })(this));
        blue_team = player_ids.filter((function(_this) {
          return function(player_id) {
            return state.team[player_id] === 'blue';
          };
        })(this));
        $section.find('.vs .red.num').text(red_team.length);
        $section.find('.vs .blue.num').text(blue_team.length);
        render_team = function(player_ids, $players) {
          return netgames.render_players(state, players.filter(function(player) {
            var ref7;
            return ref7 = player.id, indexOf.call(player_ids, ref7) >= 0;
          }), $players, {
            'current-player': function(state, players, player) {
              return player.id === netgames.player.id;
            }
          });
        };
        render_team(red_team, $section.find('.players .red'));
        return render_team(blue_team, $section.find('.players .blue'));
      }
    }), additional);
  };

  netgames.lib.terminal = function(arg, additional) {
    var leave_selector, play_again_selector, ref, ref1, ref2, ref3, restart_selector;
    ref = arg != null ? arg : {}, leave_selector = (ref1 = ref.leave_selector) != null ? ref1 : '.leave', restart_selector = (ref2 = ref.restart_selector) != null ? ref2 : '.restart', play_again_selector = (ref3 = ref.play_again_selector) != null ? ref3 : '.play-again';
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      leave: function() {
        return netgames.leave();
      },
      restart: function() {
        return netgames.restart();
      },
      play_again: function() {
        return $(this).addClass('disabled').text('Waiting for host...');
      },
      attach: function($section) {
        $section.find(leave_selector).click(this.leave);
        $section.find(restart_selector).click(this.restart);
        return $section.find(play_again_selector).click(this.play_again);
      }
    }, additional);
  };

  netgames.lib.hide_flat = function(arg, additional) {
    var object, ref, screens, trigger;
    trigger = (ref = (arg != null ? arg : {}).trigger) != null ? ref : function() {
      return true;
    };
    if (additional == null) {
      additional = {};
    }
    screens = [
      {
        selector: '#game-content',
        pitch: 90,
        "default": true
      }, {
        selector: '#hide-flat',
        pitch: 0
      }
    ];
    object = netgames.lib.rotation_screens({
      screens: screens,
      trigger: trigger
    }, {
      attach: function() {
        return $('#hide-flat .show-anyway').on('click', function(event) {
          object.current_screen = screens[0];
          return object.toggle_screens();
        });
      }
    });
    return extend_phase(object, additional);
  };

  to_radians = function(degrees) {
    return Math.PI / 180 * degrees;
  };

  to_degrees = function(radians) {
    return 180 / Math.PI * radians;
  };

  netgames.lib.rotation = function(arg, additional) {
    var interval, on_change, ref, ref1, ref2, ref3, trigger;
    ref = arg != null ? arg : {}, trigger = (ref1 = ref.trigger) != null ? ref1 : function() {
      return true;
    }, on_change = (ref2 = ref.on_change) != null ? ref2 : null, interval = (ref3 = ref.interval) != null ? ref3 : 100;
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      originalEvent: null,
      current: {
        alpha: 0,
        beta: 0,
        gamma: 0,
        pitch: 0,
        roll: 0,
        normal: {
          x: 0,
          y: 0,
          z: 0
        }
      },
      active: false,
      render: function(state, players) {
        return this.active = trigger(state, players);
      },
      attach: function() {
        $(window).on('deviceorientation', (function(_this) {
          return function(arg1) {
            var originalEvent;
            originalEvent = arg1.originalEvent;
            return _this.originalEvent = originalEvent;
          };
        })(this));
        return setInterval((function(_this) {
          return function() {
            var cos_beta, cos_gamma, rad_beta, rad_gamma, ref4, sin_beta, sin_gamma;
            if (!((((ref4 = _this.originalEvent) != null ? ref4.alpha : void 0) != null) && _this.active)) {
              return;
            }
            _this.current.alpha = _this.originalEvent.alpha;
            _this.current.beta = _this.originalEvent.beta;
            _this.current.gamma = _this.originalEvent.gamma;
            rad_beta = to_radians(_this.current.beta);
            rad_gamma = to_radians(_this.current.gamma);
            cos_beta = Math.cos(rad_beta);
            cos_gamma = Math.cos(rad_gamma);
            sin_beta = Math.sin(rad_beta);
            sin_gamma = Math.sin(rad_gamma);
            _this.current.normal.x = cos_beta * sin_gamma;
            _this.current.normal.y = sin_beta;
            _this.current.normal.z = cos_beta * cos_gamma;
            _this.current.pitch = to_degrees(Math.acos(_this.current.normal.z));
            _this.current.roll = to_degrees(Math.atan2(_this.current.normal.x, _this.current.normal.y));
            return typeof on_change === "function" ? on_change(_this) : void 0;
          };
        })(this), interval);
      }
    }, additional);
  };

  dot_product = function(a, b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
  };

  vector_length = function(a) {
    return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
  };

  normalize = function(a) {
    var length;
    length = vector_length(a);
    return {
      x: a.x / length,
      y: a.y / length,
      z: a.z / length
    };
  };

  netgames.lib.rotation_screens = function(arg, additional) {
    var hysteresis, object, ref, ref1, ref2, ref3, ref4, rotation_options, screens, trigger;
    ref = arg != null ? arg : {}, screens = (ref1 = ref.screens) != null ? ref1 : [], trigger = (ref2 = ref.trigger) != null ? ref2 : function() {
      return true;
    }, rotation_options = (ref3 = ref.rotation_options) != null ? ref3 : {}, hysteresis = (ref4 = ref.hysteresis) != null ? ref4 : 0.7;
    if (additional == null) {
      additional = {};
    }
    object = {
      current_screen: screens[0],
      min_screen: screens[0],
      attach: function() {
        var i, len, ref5, ref6, ref7, ref8, roll_length, screen;
        rotation_options.trigger = trigger;
        rotation_options.on_change = object.on_change;
        object.rotation = netgames.lib.rotation(rotation_options);
        object.rotation.attach();
        for (i = 0, len = screens.length; i < len; i++) {
          screen = screens[i];
          if (screen.vector != null) {
            screen.vector = normalize(screen.vector);
          } else {
            roll_length = Math.sin(to_radians((ref5 = screen.pitch) != null ? ref5 : 0));
            screen.vector = {
              x: roll_length * Math.sin(to_radians((ref6 = screen.roll) != null ? ref6 : 0)),
              y: roll_length * Math.cos(to_radians((ref7 = screen.roll) != null ? ref7 : 0)),
              z: Math.cos(to_radians((ref8 = screen.pitch) != null ? ref8 : 0))
            };
          }
        }
        return object.toggle_screens();
      },
      render: function() {
        var args, i, len, ref5, results, screen;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        (ref5 = object.rotation).render.apply(ref5, args);
        if (!object.rotation.active) {
          results = [];
          for (i = 0, len = screens.length; i < len; i++) {
            screen = screens[i];
            if (screen["default"]) {
              object.min_screen = screen;
              object.current_screen = screen;
              object.toggle_screens();
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      },
      toggle_screens: function() {
        var i, len, results, screen;
        results = [];
        for (i = 0, len = screens.length; i < len; i++) {
          screen = screens[i];
          results.push($(screen.selector).toggle(screen === object.current_screen));
        }
        return results;
      },
      on_change: function() {
        var angle, i, len, min_angle, min_screen, ref5, ref6, screen;
        min_angle = hysteresis * Math.acos(dot_product(object.rotation.current.normal, object.current_screen.vector)) / ((ref5 = object.current_screen.weight) != null ? ref5 : 1);
        min_screen = object.current_screen;
        for (i = 0, len = screens.length; i < len; i++) {
          screen = screens[i];
          if (screen === object.current_screen) {
            continue;
          }
          angle = Math.acos(dot_product(object.rotation.current.normal, screen.vector)) / ((ref6 = screen.weight) != null ? ref6 : 1);
          if (angle < min_angle) {
            min_angle = angle;
            min_screen = screen;
          }
        }
        if ((min_screen != null) && object.min_screen !== min_screen) {
          object.min_screen = min_screen;
          object.current_screen = min_screen;
          return object.toggle_screens();
        }
      }
    };
    return extend_phase(object, additional);
  };

  netgames.lib.clock = function(arg, additional) {
    var back_selector, clock_selector, colours, display_selector, front_selector, ref, ref1, ref2, ref3, ref4, ref5;
    ref = arg != null ? arg : {}, clock_selector = (ref1 = ref.clock_selector) != null ? ref1 : '.clock', display_selector = (ref2 = ref.display_selector) != null ? ref2 : '.display', front_selector = (ref3 = ref.front_selector) != null ? ref3 : '.front', back_selector = (ref4 = ref.back_selector) != null ? ref4 : '.back', colours = (ref5 = ref.colours) != null ? ref5 : ['#CCC', '#f39c12', '#e74c3c', '#b31a09'];
    if (additional == null) {
      additional = {};
    }
    return extend_phase({
      refresh: function(state, players) {
        var $back, $clock, $front, back_diameter, back_steps, circumference_left, clock_text, colour_index, elapsed_millis, elapsed_minutes, elapsed_seconds, front_circumference, front_diameter, front_steps, seconds, seconds_text, start_time, stroke_width, uncounted_minutes, width;
        $clock = $(clock_selector);
        width = +$clock.data('width');
        stroke_width = +$clock.data('stroke-width');
        start_time = netgames.to_client_timestamp(state.start_time);
        elapsed_millis = Math.max(0, Date.now() - start_time);
        elapsed_seconds = Math.floor(elapsed_millis / 1000);
        elapsed_minutes = Math.floor(elapsed_seconds / 60);
        back_steps = 1;
        front_steps = 1;
        uncounted_minutes = elapsed_minutes - colours.length + 1;
        while (uncounted_minutes > 0 && stroke_width * front_steps * 2 < width) {
          ++back_steps;
          if (stroke_width * back_steps * 2 > width) {
            ++front_steps;
            back_steps = front_steps;
          }
          --uncounted_minutes;
        }
        back_diameter = width - stroke_width * back_steps;
        front_diameter = width - stroke_width * front_steps;
        front_circumference = Math.PI * front_diameter;
        seconds = elapsed_seconds - elapsed_minutes * 60;
        circumference_left = (1 - seconds / 60 - elapsed_minutes * 2) * front_circumference;
        seconds_text = seconds < 10 ? "0" + seconds : seconds.toString();
        clock_text = elapsed_minutes ? elapsed_minutes + ":" + seconds_text : seconds_text;
        colour_index = Math.min(colours.length - 1, elapsed_minutes);
        $clock.find(display_selector).text(clock_text);
        $front = $clock.find(front_selector);
        $front.attr('stroke', colours[colour_index]);
        $front.attr('stroke-width', front_steps * stroke_width);
        $front.attr('stroke-dasharray', front_circumference + ' ' + front_circumference);
        $front.attr('stroke-dashoffset', circumference_left);
        $front.attr('r', front_diameter / 2);
        $back = $clock.find(back_selector);
        $back.attr('stroke', colours[colour_index]);
        $back.attr('stroke-width', back_steps * stroke_width);
        $back.attr('r', back_diameter / 2);
        return setTimeout(netgames.refresh, 1000 - elapsed_millis % 1000);
      }
    }, additional);
  };

  ScalarKalmanFilter = (function() {
    function ScalarKalmanFilter(arg) {
      var p99_acceptable_error, ref, ref1, ref2, ref3, ref4;
      ref = arg != null ? arg : {}, p99_acceptable_error = ref.p99_acceptable_error, this.update_callback = ref.update_callback, this.min_update_interval_ms = (ref1 = ref.min_update_interval_ms) != null ? ref1 : 1 * 1000, this.max_update_interval_ms = (ref2 = ref.max_update_interval_ms) != null ? ref2 : 20 * 1000, this.process_variance = ref.process_variance, this.initial_measurement_variance = ref.initial_measurement_variance, this.measurement_variance_weight = (ref3 = ref.measurement_variance_weight) != null ? ref3 : 4, this.z_score_reset = (ref4 = ref.z_score_reset) != null ? ref4 : 3.2905;
      this.update = bind(this.update, this);
      this.time_difference = 0;
      this.variance = 1e10;
      this.measurement_variance = this.initial_measurement_variance;
      this.previous_measurement = null;
      this.last_update = Date.now();
      this.update_timeout = setTimeout(this.update_callback, 0);
      this.p99_acceptable_variance = Math.pow(p99_acceptable_error / 2.575829306, 2);
    }

    ScalarKalmanFilter.prototype.update = function(measurement, error_bounds) {
      var measurement_delta, measurement_diff, measurement_variance, now, optimal_kalman_gain, time_since_last_update, time_until_next_update, time_until_process_variance_dominates, z_score;
      if (error_bounds == null) {
        error_bounds = null;
      }
      now = Date.now();
      time_since_last_update = Math.max(0, now - this.last_update);
      this.last_update = now;
      this.variance += this.process_variance * time_since_last_update / 1000;
      if (this.previous_measurement != null) {
        measurement_delta = this.previous_measurement - measurement;
        this.measurement_variance = (this.measurement_variance * this.measurement_variance_weight + Math.pow(measurement_delta, 2) / 2) / (this.measurement_variance_weight + 1);
      }
      measurement_variance = this.measurement_variance;
      if (error_bounds != null) {
        measurement_variance = Math.min(measurement_variance, Math.pow(error_bounds / 2.575829306, 2));
      }
      z_score = (measurement - this.time_difference) / Math.sqrt(measurement_variance + this.variance);
      if (Math.abs(z_score) > this.z_score_reset) {
        this.variance = 1e10;
      }
      measurement_diff = measurement - this.time_difference;
      optimal_kalman_gain = this.variance / (measurement_variance + this.variance);
      this.time_difference += measurement_diff * optimal_kalman_gain;
      this.variance = (1 - optimal_kalman_gain) * this.variance;
      if (error_bounds != null) {
        this.time_difference = Math.max(measurement - error_bounds, Math.min(this.time_difference, measurement + error_bounds));
      }
      time_until_process_variance_dominates = (this.p99_acceptable_variance - this.variance) / this.process_variance * 1000;
      time_until_next_update = Math.min(Math.max(this.min_update_interval_ms, time_until_process_variance_dominates), this.max_update_interval_ms);
      clearTimeout(this.update_timeout);
      this.update_timeout = setTimeout(this.update_callback, time_until_next_update);
      return this.previous_measurement = measurement;
    };

    return ScalarKalmanFilter;

  })();

  update_time_difference_filter = function(client_timestamp, server_timestamp) {
    var time_difference, time_to_return;
    time_to_return = (Date.now() - client_timestamp) / 2;
    time_difference = server_timestamp - (client_timestamp + time_to_return);
    netgames.time_difference_filter.update(time_difference, time_to_return);
    return netgames.time_difference = netgames.time_difference_filter.time_difference;
  };

  update_room = function(room) {
    //var clock_difference, ref, ref1, ref2, ref3, ref4, ref5, same_room, time_difference;
    //same_room = ((ref = netgames.room) != null ? ref.created : void 0) === room.created;
    //clock_difference = ((ref1 = (ref2 = netgames.room) != null ? (ref3 = ref2.clock) != null ? ref3.server : void 0 : void 0) != null ? ref1 : 0) - room.clock.server;
    //time_difference = ((ref4 = (ref5 = netgames.room) != null ? ref5.last_modified : void 0) != null ? ref4 : 0) - room.last_modified;
    //if (same_room && (clock_difference > 0 || (clock_difference === 0 && time_difference > 0))) {
    //  netgames.socket.send(JSON.stringify({
    //    action: 'recover',
    //    room: netgames.room
    //  }));
    //} else {
    //  netgames.room = room;
    //}
    netgames.room = room;
    return netgames.render(netgames.room.state, netgames.room.players);
  };

  join_room = function() {
    var host, room_id, socket;
    room_id = netgames.room_id = localStorage.join_request != null ? localStorage.join_request : $('#room-id').val();
    host = window.location.host;

    socket = netgames.socket = new WebSocket('wss://' + window.netgames_host + '/socket/');
    socket.onopen = function() {
      $('#connecting').hide();
      if (netgames.time_difference_filter == null) {
        netgames.time_difference_filter = new ScalarKalmanFilter({
          p99_acceptable_error: 100,
          update_callback: netgames.measure_time_difference,
          process_variance: 0.1,
          initial_measurement_variance: 1e4
        });
      }
      return netgames.join();
    };
    socket.onclose = function(reason) {
      if (reason === 'io server disconnect') {
        return $('#disconnected').show();
      }
    };
//    socket.on('reconnecting', function() {
//      return $('#connecting').show();
//    });
//    socket.on('time-difference', function(arg) {
//      var client_timestamp, server_timestamp;
//      client_timestamp = arg.client_timestamp, server_timestamp = arg.server_timestamp;
//      return update_time_difference_filter(client_timestamp, server_timestamp);
//    });
//    socket.on('joined', function(arg) {
//      var client_timestamp, room, server_timestamp;
//      client_timestamp = arg.client_timestamp, server_timestamp = arg.server_timestamp, room = arg.room;
//      update_time_difference_filter(client_timestamp, server_timestamp);
//      return update_room(room);
//    });
//    socket.on('left', function() {
//      socket.disconnect(true);
//      return window.location = window.location.toString().replace(/[^\/]*[\/][^\/?]*($|(?=\?))/, '');
//    });
//    socket.on('booted', function(player_id) {
//      if (netgames.player.id === player_id) {
//        $('#content').hide();
//        $('#booted').show();
//        return socket.disconnect(true);
//      }
//    });
//    socket.onmessage = function(event) {
//      if (event.action == 'state') {
//        update_room(room)
//      }
//    }

    socket.onmessage = function(arg) {
      console.log('Inside onmessage two, netgames:' + JSON.stringify(netgames));
      console.log('Inside onmessage two, arg.data:' + JSON.stringify(arg.data));
      var room = JSON.parse(arg.data);
      netgames.room_id = room.room_id;
      if (arg.action == 'register-player-interactions') {
        var players, timestamp;
        timestamp = arg.timestamp, players = arg.players;
        netgames.register_player_interactions(timestamp, players);
        return dataLayer.push({
          event: 'register-player-interactions'
        });
      } else {
        console.log('Inside onmessage two room.js:1311, room:' + JSON.stringify(room));
        console.log('Inside onmessage two room.js:1312, room type:' + typeof room);
        console.log('Inside onmessage two room.js:1313 calling update_room(room)');
        update_room(room);
      }
    };
    return socket.onerror = function(message) {
      console.log('Inside onerror, netgames:' + JSON.stringify(netgames))
      $('#error-message').text(message);
      return console.error(message);
    };

    //socket.addEventListener("message", function(event) {
    //  console.log('Inside addedEventListener, netgames:' + JSON.stringify(netgames))
    //  console.log('Inside addedEventListener, event:' + JSON.stringify(event.data))
    //  update_room(event.data);
    //});
  };

  $(function() {
    var $change_name, $create_user, $info_menu_button, $info_panel, $spectator_base, $utility_menu, clear_booting, clear_reset_button, close_change_name_form, close_utility_menu, i, key, len, name, open_change_name_form, open_utility_menu, phase, ref, ref1, ref2, render_boot, to_boot, url_params;
    ref = netgames.phases;
    for (name in ref) {
      phase = ref[name];
      if (typeof phase.attach === "function") {
        phase.attach($('#' + name));
      }
    }
    $create_user = $('#create-user');
    $create_user.find('a').click(function() {
      return $create_user.submit();
    });
    $create_user.submit(function(event) {
      var player_name;
      event.preventDefault();
      player_name = $('#create-user input').val();
      if (!netgames.change_name_storage(player_name)) {
        return;
      }
      $create_user.hide();
      return join_room();
    });
    netgames.player = {};

    /* Generate a new UUID - Assuming that self.crypto.randomUUID() is available */
    let new_player_uuid = self.crypto.randomUUID();

    netgames.player.id = (ref1 = safe_localStorage_access(function() {
      return localStorage.player_id;
    })) != null ? ref1 : new_player_uuid;
    netgames.player.name = safe_localStorage_access(function() {
      return localStorage.player_name;
    });
    safe_localStorage_access(function() {
      if (localStorage.player_id == null) {
        return localStorage.player_id = netgames.player.id;
      }
    });
    if (netgames.player.name != null) {
      join_room();
      window.location.replace("room.html")
    } else {
      //if (URLSearchParams) {
      //  url_params = new URLSearchParams(window.location.search);
      //  ref2 = Array.from(url_params.keys());
      //  for (i = 0, len = ref2.length; i < len; i++) {
      //    key = ref2[i];
      //    if (key.endsWith('name')) {
      //      $create_user.find('input').val(url_params.get(key));
      //      break;
      //    }
      //  }
      //}
      $create_user.show();
    }
    $('#booted .join-again').click(function() {
      return window.location.reload();
    });
    $utility_menu = $('#utility-menu');
    $change_name = $utility_menu.find('.change-name');
    to_boot = new Set();
    clear_reset_button = function() {
      var $reset_game;
      $reset_game = $utility_menu.find('.reset-game');
      $reset_game.removeClass('btn-danger');
      return $reset_game.addClass('btn-default');
    };
    open_change_name_form = function() {
      var $input;
      $change_name.addClass('open');
      $input = $change_name.find('input');
      $input.val(netgames.player.name);
      return $input.focus();
    };
    close_change_name_form = function() {
      $change_name.removeClass('open');
      return $change_name.find('input').val('');
    };
    render_boot = function() {
      var $boot_players, $player, booting, j, len1, no_players_selected, player, player_id, ref3, results;
      booting = $utility_menu.hasClass('booting');
      no_players_selected = booting && to_boot.length === 0;
      $boot_players = $utility_menu.find('.boot-players.btn-primary');
      $boot_players.toggleClass('disabled', no_players_selected);
      $boot_players.text(no_players_selected ? 'Select players to boot' : 'Boot players');
      ref3 = $utility_menu.find('.players li, .spectators li');
      results = [];
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        player = ref3[j];
        $player = $(player);
        player_id = $player.data('id');
        results.push($player.toggleClass('to-boot', to_boot.has(player_id)));
      }
      return results;
    };
    clear_booting = function() {
      to_boot.clear();
      $utility_menu.removeClass('booting');
      return render_boot();
    };
    open_utility_menu = function() {
      $utility_menu.addClass('open');
      clear_booting();
      close_change_name_form();
      return clear_reset_button();
    };
    close_utility_menu = function() {
      $utility_menu.removeClass('open');
      clear_booting();
      close_change_name_form();
      return clear_reset_button();
    };
    $(document).on('click', '.utility-menu-button', function(event) {
      return open_utility_menu();
    });
    $utility_menu.find('.shade, .close-button').click(function(event) {
      return close_utility_menu();
    });
    $utility_menu.find('.reset-game').click(function(event) {
      var $this;
      $this = $(this);
      if ($this.is('.btn-default')) {
        $this.removeClass('btn-default');
        return $this.addClass('btn-danger');
      } else if ($this.is('.btn-danger')) {
        close_utility_menu();
        return netgames.restart();
      }
    });
    $utility_menu.find('.boot-players.btn-default').click(function(event) {
      $utility_menu.addClass('booting');
      return render_boot();
    });
    $utility_menu.find('.boot-players.btn-primary').click(function(event) {
      netgames.boot(Array.from(to_boot));
      return close_utility_menu();
    });
    $utility_menu.find('.players, .spectators').on('click', 'li.boot-enabled', function(event) {
      var player_id;
      player_id = $(this).data('id');
      if (to_boot.has(player_id)) {
        to_boot["delete"](player_id);
      } else {
        to_boot.add(player_id);
      }
      return render_boot();
    });
    $utility_menu.find('.boot-cancel').click(function(event) {
      $utility_menu.removeClass('booting');
      return render_boot();
    });
    $utility_menu.find('.spectate').click(function(event) {
      close_utility_menu();
      return netgames.boot([netgames.player.id]);
    });
    $utility_menu.find('.leave-game').click(function(event) {
      close_utility_menu();
      return netgames.leave();
    });
    $change_name.find('> a').click(function(event) {
      return open_change_name_form();
    });
    $change_name.find('form a').click(function(event) {
      return $change_name.find('form').submit();
    });
    $change_name.find('form').submit(function(event) {
      var $input;
      event.preventDefault();
      $input = $(this).find('input');
      if (netgames.change_name($input.val())) {
        return close_change_name_form();
      }
    });
    $spectator_base = $('#spectator-base');
    $spectator_base.find('.join-in').click(function(event) {
      return netgames.join_midway();
    });
    $spectator_base.find('.leave-game').click(function(event) {
      return netgames.leave();
    });
    $info_panel = $('#info');
    $info_menu_button = $('.info-menu-button');
    $info_menu_button.on('click', function(event) {
      return $info_panel.addClass('open');
    });
    return $info_panel.find('.shade, .close-button').click(function(event) {
      return $info_panel.removeClass('open');
    });
  });

}).call(this);

//# sourceMappingURL=room.js.map
